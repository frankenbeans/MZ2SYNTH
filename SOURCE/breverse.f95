! Copyright (C) 2024 by E. Lamprecht
! See LICENSE.md in this repository.

MODULE BREVERSE
  USE ISO_C_BINDING
  IMPLICIT NONE

  INTERFACE BREV    
     MODULE PROCEDURE BREV_INT16
     MODULE PROCEDURE BREV_INT32
     MODULE PROCEDURE BREV_FLT32
     MODULE PROCEDURE BREV_FLT64
  END INTERFACE BREV

CONTAINS 

  SUBROUTINE ENDIAN(C)
    IMPLICIT NONE
    ! --- DUMMIES ---
    CHARACTER(LEN=*) :: C
    ! --- VARIABLES ---
    CHARACTER(KIND=C_CHAR) :: TC
    INTEGER                :: TI
    ! --- EXE CODE ---
    TI=1                ! LEAST SIGNIFICANT BYTE NOW SET
    TC=TRANSFER(TI,TC)  ! TC NOW CONTAINS LEFTMOST BYTE
    IF (ICHAR(TC).NE.0) THEN
       ! LOWEST ADDRESS IS LEAST SIGNIFICANT BYTE
       C='LITTLE-ENDIAN'
    ELSE
       ! LOWEST ADDRESS IS MOST SIGNIFICANT BYTE
       C='BIG-ENDIAN'
    END IF
    ! --- END CODE ---
  END SUBROUTINE ENDIAN

  ELEMENTAL FUNCTION BREV_INT16(I16)
    IMPLICIT NONE
    INTEGER(KIND=C_INT16_T) :: BREV_INT16
    ! --- DUMMIES ---
    INTEGER(KIND=C_INT16_T) :: I16
    INTENT(IN)              :: I16
    ! --- VARIABLES ---
    CHARACTER(KIND=C_CHAR)  :: CO(1:2),CI(1:2)
    ! --- EXE CODE ---
    CI=TRANSFER(I16,CI)
    CALL BREV0(CO,CI,2)
    BREV_INT16=TRANSFER(CO,BREV_INT16)
    ! --- END CODE ---
  END FUNCTION BREV_INT16 

  ELEMENTAL FUNCTION BREV_INT32(I32)
    IMPLICIT NONE
    INTEGER(KIND=C_INT32_T) :: BREV_INT32
     ! --- DUMMIES ---
    INTEGER(KIND=C_INT32_T) :: I32
    INTENT(IN)              :: I32
    ! --- VARIABLES ---
    CHARACTER(KIND=C_CHAR)  :: CO(1:4),CI(1:4)
    ! --- EXE CODE ---
    CI=TRANSFER(I32,CI)
    CALL BREV0(CO,CI,4)
    BREV_INT32=TRANSFER(CO,BREV_INT32)
    ! --- END CODE ---
  END FUNCTION BREV_INT32

  ELEMENTAL FUNCTION BREV_INT64(I64)
    IMPLICIT NONE
    INTEGER(KIND=C_INT64_T) :: BREV_INT64
     ! --- DUMMIES ---
    INTEGER(KIND=C_INT64_T) :: I64
    INTENT(IN)              :: I64
    ! --- VARIABLES ---
    CHARACTER(KIND=C_CHAR)  :: CO(1:8),CI(1:8)
    ! --- EXE CODE ---
    CI=TRANSFER(I64,CI)
    CALL BREV0(CO,CI,8)
    BREV_INT64=TRANSFER(CO,BREV_INT64)
    ! --- END CODE ---
  END FUNCTION BREV_INT64

  ELEMENTAL FUNCTION BREV_FLT32(F32)
    IMPLICIT NONE
    REAL(KIND=C_FLOAT) :: BREV_FLT32
    ! --- DUMMIES ---
    REAL(KIND=C_FLOAT) :: F32
    INTENT(IN)         :: F32
    ! --- VARIABLES ---
    CHARACTER(KIND=C_CHAR)  :: CO(1:4),CI(1:4)
    ! --- EXE CODE ---
    CI=TRANSFER(F32,CI)
    CALL BREV0(CO,CI,4)
    BREV_FLT32=TRANSFER(CO,BREV_FLT32)
    ! --- END CODE ---
  END FUNCTION BREV_FLT32

  ELEMENTAL FUNCTION BREV_FLT64(F64)
    IMPLICIT NONE
    REAL(KIND=C_DOUBLE) :: BREV_FLT64
     ! --- DUMMIES ---
    REAL(KIND=C_DOUBLE) :: F64
    INTENT(IN)          :: F64
    ! --- VARIABLES ---
    CHARACTER(KIND=C_CHAR)  :: CO(1:8),CI(1:8)
    ! --- EXE CODE ---
    CI=TRANSFER(F64,CI)
    CALL BREV0(CO,CI,8)
    BREV_FLT64=TRANSFER(CO,BREV_FLT64)
    ! --- END CODE ---
  END FUNCTION BREV_FLT64
  
  PURE SUBROUTINE BREV0(CO,CI,N)
    IMPLICIT NONE
    ! --- DUMMIES ---
    INTEGER                      :: N
    CHARACTER(KIND=C_CHAR,LEN=1) :: CO(1:N),CI(1:N)    
    INTENT(INOUT)                :: CO
    INTENT(IN)                   :: CI,N
    ! --- VARIABLES ---
    INTEGER :: J
    ! --- EXE CODE ---
    DO J=1,N
       CO(J)=CI(N-J+1)
    END DO
    ! --- END CODE ---
  END SUBROUTINE BREV0
END MODULE BREVERSE
