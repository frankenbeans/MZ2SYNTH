#include "defaults.inc"

MODULE MZOSC
  USE Constant, ONLY: RKIND, IFU, OFU
  USE Pflags
  IMPLICIT NONE

  INTEGER,PARAMETER :: N_OCT        =10
  INTEGER,PARAMETER :: N_OSC_PER_OCT=72
  INTEGER,PARAMETER :: N_SMT_PER_OCT=12
  INTEGER,PARAMETER :: N_OSC         =N_OCT*N_OSC_PER_OCT
  INTEGER,PARAMETER :: N_OSC_PER_SMT =N_OSC_PER_OCT / N_SMT_PER_OCT
  INTEGER,PARAMETER :: N_TIC_PER_CYC =DNTPC

  INTEGER,PARAMETER :: FRQ_REFERENCE_OSC=440
  INTEGER,PARAMETER :: REFERENCE_SMT_NUM= 49

  CHARACTER(LEN=*)   ,PARAMETER :: OSC_D_WVNAME = '/usr/lib/wavetable.lib'

  REAL(KIND=RKIND),   ALLOCATABLE :: OSC_FREQ(:)
  INTEGER,            ALLOCATABLE :: OSC_INCR(:)
  INTEGER,            ALLOCATABLE :: OSC_ACCM(:)
  REAL(KIND=RKIND),   ALLOCATABLE :: LKT_SINE(:,:)
  REAL(KIND=RKIND),   ALLOCATABLE :: LKT_SQWV(:,:)
  REAL(KIND=RKIND),   ALLOCATABLE :: LKT_SWTH(:,:)
  REAL(KIND=RKIND),   ALLOCATABLE :: LKT_TRNG(:,:)

  INTEGER :: N_SMP_PER_SEC =DSMPR

CONTAINS

  SUBROUTINE MZOSC_CLEAR()
    IMPLICIT NONE
    ! --- EXE CODE ---
    IF (ALLOCATED(LKT_TRNG)) DEALLOCATE(LKT_TRNG)
    IF (ALLOCATED(LKT_SWTH)) DEALLOCATE(LKT_SWTH)
    IF (ALLOCATED(LKT_SQWV)) DEALLOCATE(LKT_SQWV)
    IF (ALLOCATED(LKT_SINE)) DEALLOCATE(LKT_SINE)
    IF (ALLOCATED(OSC_ACCM)) DEALLOCATE(OSC_ACCM)
    IF (ALLOCATED(OSC_INCR)) DEALLOCATE(OSC_INCR)
    IF (ALLOCATED(OSC_FREQ)) DEALLOCATE(OSC_FREQ)    
    ! --- END CODE ---
  END SUBROUTINE MZOSC_CLEAR

  SUBROUTINE MZOSC_INIT(ABINITIO,WVNAME,ASMPR)
    IMPLICIT NONE
    ! --- DUMMY ARGS ---
    LOGICAL          :: ABINITIO
    CHARACTER(LEN=*) :: WVNAME
    INTEGER          :: ASMPR
    INTENT(IN) :: ABINITIO, WVNAME, ASMPR
    OPTIONAL   :: WVNAME, ASMPR
    ! --- PARAMETERS ---
    CHARACTER(LEN=*),PARAMETER :: E00000='* ERROR (MZOSC_INIT): '
    CHARACTER(LEN=*),PARAMETER :: ENOMEM=E00000//'MEMORY ALLOCATION FAILURE'
    CHARACTER(LEN=*),PARAMETER :: EWDUMP=E00000//'CANNOT WRITE OSCILLATOR DUMP'
    CHARACTER(LEN=*),PARAMETER :: EWSAVE=E00000//'CANNOT SAVE OSCILLATOR DATA'
    CHARACTER(LEN=*),PARAMETER :: EWLOAD=E00000//'CANNOT LOAD OSCILLATOR DATA'
    CHARACTER(LEN=*),PARAMETER :: EWSHRT=E00000//'SHORT OSCILLATOR DATA FILE'
    ! --- VARIABLES ---
    INTEGER :: K,MS
    CHARACTER(LEN=:),ALLOCATABLE :: LWVNAME
    ! --- EXTERNALS ---
    INTERFACE
       SUBROUTINE WVFSIN(IFWAVE,IFSMPL,IZOUTP,OUTPUT)
         IMPLICIT NONE
         DOUBLE PRECISION IFWAVE,IFSMPL
         INTEGER          IZOUTP
         DOUBLE PRECISION OUTPUT(1:IZOUTP)
         INTENT(IN)    :: IFWAVE,IFSMPL,IZOUTP
         INTENT(INOUT) :: OUTPUT
       END SUBROUTINE WVFSIN
       
       SUBROUTINE WVFSQR(IFWAVE,IFSMPL,IZOUTP,OUTPUT)
         IMPLICIT NONE
         DOUBLE PRECISION IFWAVE,IFSMPL
         INTEGER          IZOUTP
         DOUBLE PRECISION OUTPUT(1:IZOUTP)
         INTENT(IN)    :: IFWAVE,IFSMPL,IZOUTP
         INTENT(INOUT) :: OUTPUT
       END SUBROUTINE WVFSQR

       SUBROUTINE WVFSAW(IFWAVE,IFSMPL,IZOUTP,OUTPUT)
         IMPLICIT NONE
         DOUBLE PRECISION IFWAVE,IFSMPL
         INTEGER          IZOUTP
         DOUBLE PRECISION OUTPUT(1:IZOUTP)
         INTENT(IN)    :: IFWAVE,IFSMPL,IZOUTP
         INTENT(INOUT) :: OUTPUT
       END SUBROUTINE WVFSAW

       SUBROUTINE WVFTRI(IFWAVE,IFSMPL,IZOUTP,OUTPUT)
         IMPLICIT NONE
         DOUBLE PRECISION IFWAVE,IFSMPL
         INTEGER          IZOUTP
         DOUBLE PRECISION OUTPUT(1:IZOUTP)
         INTENT(IN)    :: IFWAVE,IFSMPL,IZOUTP
         INTENT(INOUT) :: OUTPUT
       END SUBROUTINE WVFTRI
    END INTERFACE
    ! --- EXE CODE ---
    CALL MZOSC_CLEAR()
    
    ALLOCATE(OSC_FREQ(1:N_TIC_PER_CYC),         &
             OSC_INCR(1:N_OSC),                 &
             OSC_ACCM(1:N_OSC),                 & 
             LKT_SINE(1:N_TIC_PER_CYC,1:N_OSC), &
             LKT_SQWV(1:N_TIC_PER_CYC,1:N_OSC), &
             LKT_SWTH(1:N_TIC_PER_CYC,1:N_OSC), &
             LKT_TRNG(1:N_TIC_PER_CYC,1:N_OSC), STAT=MS)
    IF (MS.NE.0) STOP ENOMEM

    IF (PRESENT(WVNAME)) THEN
       LWVNAME=WVNAME
    ELSE
       LWVNAME=OSC_D_WVNAME
    END IF

    IF (PRESENT(ASMPR)) THEN
       IF (ASMPR.LT.DSMPR) GOTO 900
       N_SMP_PER_SEC=ASMPR
    END IF

    IF (ABINITIO) THEN
       !$OMP PARALLEL

       !$OMP DO
       DO K=1,N_OSC
          OSC_FREQ(K)=OSCILLATOR_FREQ(K)
       END DO
       !$OMP END DO

       !$OMP DO
       DO K=1,N_OSC
          OSC_INCR(K)=NINT(REAL(N_TIC_PER_CYC,RKIND)*                  &
                          (OSC_FREQ(K)/REAL(N_SMP_PER_SEC,RKIND)))
       END DO
       !$OMP END DO

       !$OMP DO SCHEDULE(DYNAMIC)
       DO K=1,N_OSC
          CALL OSCILLATOR_INIT(K)
       END DO
       !$OMP END DO
       !$OMP END PARALLEL
       
       CALL OSCILLATOR_BANK_SAVE(LWVNAME)
    ELSE
       CALL OSCILLATOR_BANK_LOAD(LWVNAME)
    END IF

    OSC_ACCM=0

    IF (PFL_DBUG) CALL OSCILLATOR_BANK_DUMP()
    RETURN
    ! --- END CODE ---
800 FORMAT('!ERROR (MZOSC_INIT):',A,999(:,I0,A))
900 WRITE(*,800) 'INVALID ASMPR',ASMPR,', MUST BE >= 44100' ; STOP
   
  CONTAINS

    ELEMENTAL FUNCTION OSCILLATOR_FREQ(OSCNO) RESULT(FREQ)
      IMPLICIT NONE
      REAL(KIND=RKIND) :: FREQ
      ! --- DUMMY ARGUMENTS ---
      INTEGER :: OSCNO
      INTENT(IN) :: OSCNO
      ! --- VARIABLES       ---
      REAL(KIND=RKIND) :: EXPO
      ! --- EXE CODE        ---
      EXPO=REAL(OSCNO-REFERENCE_SMT_NUM*N_OSC_PER_SMT,RKIND)/N_OSC_PER_OCT
      FREQ=REAL(FRQ_REFERENCE_OSC,RKIND)*2.0_RKIND**EXPO
      ! --- END CODE        ---
    END FUNCTION OSCILLATOR_FREQ

    SUBROUTINE OSCILLATOR_INIT(OSCNO)
      IMPLICIT NONE
      ! --- DUMMY ARGUMENTS ---
      INTEGER              :: OSCNO
      INTENT(IN)           :: OSCNO
      ! --- EXE CODE ---
      IF (PFL_VERB) WRITE(*,700) 'PRIME OSCILLATOR NO.', OSCNO, &
           'FREQ IN CPS =', OSCILLATOR_FREQ(OSCNO)
      
      CALL WVFSIN(DBLE(OSC_FREQ(OSCNO)),DBLE(N_SMP_PER_SEC), &
                       N_TIC_PER_CYC,LKT_SINE(:,OSCNO))

      CALL WVFSQR(DBLE(OSC_FREQ(OSCNO)),DBLE(N_SMP_PER_SEC), &
                       N_TIC_PER_CYC,LKT_SQWV(:,OSCNO))

      CALL WVFSAW(DBLE(OSC_FREQ(OSCNO)),DBLE(N_SMP_PER_SEC), &
                       N_TIC_PER_CYC,LKT_SWTH(:,OSCNO))

      CALL WVFTRI(DBLE(OSC_FREQ(OSCNO)),DBLE(N_SMP_PER_SEC), &
                       N_TIC_PER_CYC,LKT_TRNG(:,OSCNO))
      ! --- END CODE ---
      RETURN
700   FORMAT('MZSYNTH OSCILLATOR_INIT:',999(:,1X,A,:,1X,G12.7))
    END SUBROUTINE OSCILLATOR_INIT

    SUBROUTINE OSCILLATOR_BANK_SAVE(OFN)
      IMPLICIT NONE
      ! --- DUMMY ARGUMENTS ---
      CHARACTER(LEN=*) :: OFN
      INTENT(IN) :: OFN
      ! --- EXE CODE ---
      IF (PFL_VERB) WRITE(*,700) 'SAVING OSCILLATOR BANK TO '//TRIM(OFN)
      OPEN(UNIT=OFU,FILE=OFN,ACCESS='SEQUENTIAL',ACTION='READWRITE', &
           STATUS='REPLACE',FORM='UNFORMATTED',ERR=900)
      REWIND(OFU)
      WRITE(UNIT=OFU,ERR=900) OSC_FREQ(:),   &
                              OSC_INCR(:),   &
                              LKT_SINE(:,:), &
                              LKT_SQWV(:,:), &
                              LKT_SWTH(:,:), &
                              LKT_TRNG(:,:)
      ENDFILE(UNIT=OFU); CLOSE(UNIT=OFU)
      ! --- END CODE ---
      RETURN
700   FORMAT('MZSYNTH OSCILLATOR_BANK_SAVE:',1X,A)
900   WRITE(*,'(A)') EWSAVE//' '//TRIM(OFN) ; STOP
    END SUBROUTINE OSCILLATOR_BANK_SAVE

    SUBROUTINE OSCILLATOR_BANK_LOAD(IFN)
      IMPLICIT NONE
      ! --- DUMMY ARGUMENTS ---
      CHARACTER(LEN=*) :: IFN
      INTENT(IN) :: IFN
      ! --- EXE CODE ---
      IF (PFL_VERB) WRITE(*,700) 'LOADING OSCILLATOR BANK FROM '//TRIM(IFN)
      OPEN(UNIT=IFU,FILE=IFN,ACCESS='SEQUENTIAL',ACTION='READ', &
           STATUS='OLD',FORM='UNFORMATTED',ERR=900)
      REWIND(IFU)
      READ(UNIT=IFU,ERR=900,END=910) OSC_FREQ(:),   &
                                     OSC_INCR(:),   &
                                     LKT_SINE(:,:), &
                                     LKT_SQWV(:,:), &
                                     LKT_SWTH(:,:), &
                                     LKT_TRNG(:,:)
                                     
      CLOSE(UNIT=IFU)
      ! --- END CODE ---
      RETURN
700   FORMAT('MZSYNTH OSCILLATOR_BANK_LOAD:',1X,A)
900   WRITE(*,'(A)') EWLOAD//' '//TRIM(IFN) ; STOP
910   WRITE(*,'(A)') EWSHRT//' '//TRIM(IFN) ; STOP
    END SUBROUTINE OSCILLATOR_BANK_LOAD

    SUBROUTINE OSCILLATOR_BANK_DUMP()
      IMPLICIT NONE
      ! --- PARAMETERS ---      
      ! --- VARIABLES ---
      INTEGER           :: J
      CHARACTER(LEN=16) :: TDFN
      ! --- EXE CODE ---
      DO J=1,N_OSC
         WRITE(TDFN,600) J
         IF (PFL_VERB) WRITE(*,700) 'DUMPING OSCILLATOR '//TDFN ;
         CALL OSCILLATOR_DUMP(J,TDFN)
      END DO
      ! --- END CODE ---
600   FORMAT('oscl',I4.4,'.txt')
700   FORMAT('! OSCILLATOR_BANK_DUMP:',1X,(A))
    END SUBROUTINE OSCILLATOR_BANK_DUMP

    SUBROUTINE OSCILLATOR_DUMP(IOSCNO,DFN)
      IMPLICIT NONE
      ! --- DUMMY ARGUMENTS ---
      INTEGER          :: IOSCNO
      CHARACTER(LEN=*) :: DFN
      INTENT(IN) :: IOSCNO, DFN
      ! --- VARIABLES ---
      INTEGER :: J
      ! --- EXE CODE ---
      OPEN(UNIT=OFU,FILE=DFN,ACCESS='SEQUENTIAL',ACTION='READWRITE', &
           STATUS='REPLACE',ERR=900)
      REWIND(OFU)
      WRITE(OFU,700,ERR=900)
      WRITE(OFU,710,ERR=900) 'OSCILLATOR NUMBER',IOSCNO
      WRITE(OFU,711,ERR=900) 'FREQUENCY IN CPS:',OSC_FREQ(IOSCNO)
      WRITE(OFU,710,ERR=900) 'CYCLE INCREMENT: ',OSC_INCR(IOSCNO)
      WRITE(OFU,712,ERR=900) 'POINT.NO','VAL.SINE','VAL.SQWV','VAL.SWTH', &
                             'VAL.TRNG'
      WRITE(OFU,712,ERR=900) '--------','--------','--------','--------', &
                             '--------'
      DO J=1,N_TIC_PER_CYC
         WRITE(OFU,713,ERR=900) J,                                      &
                                LKT_SINE(J,IOSCNO), LKT_SQWV(J,IOSCNO), &
                                LKT_SWTH(J,IOSCNO), LKT_TRNG(J,IOSCNO)
      END DO
      ENDFILE(OFU) ; CLOSE(OFU)
      ! --- END CODE ---
      RETURN
700   FORMAT('!',79('-'))
710   FORMAT('!',1X,A,1X,I6)
711   FORMAT('!',1X,A,1X,G12.5)
712   FORMAT('!',5(1X,A14))
713   FORMAT( 1X,5(1X,G14.5))
900   WRITE(*,'(A)') EWDUMP//' '//TRIM(DFN) ; STOP
    END SUBROUTINE OSCILLATOR_DUMP
    
  END SUBROUTINE MZOSC_INIT

  SUBROUTINE MZOSC_TICK()
    IMPLICIT NONE
    ! --- VARIABLES ---
    INTEGER :: J
    ! --- EXE CODE ---
    !$OMP PARALLEL 
    !$OMP DO
    DO J=1,N_OSC
      OSC_ACCM(J)=OSC_ACCM(J)+OSC_INCR(J)
      IF (OSC_ACCM(J).GT.N_TIC_PER_CYC) OSC_ACCM(J)=OSC_ACCM(J)-N_TIC_PER_CYC
    END DO
    !$OMP END DO
    !$OMP END PARALLEL
    ! --- END CODE ---
  END SUBROUTINE MZOSC_TICK
    
END MODULE MZOSC
