#include "defaults.inc"

PROGRAM MZSYNTH  
  USE Constant, ONLY: RKIND
  USE PFlags
  USE MZOSC
  USE MZPNL
  USE MZNORM
  USE MZAUFILE
  IMPLICIT NONE

  ! INPUT PARAMETERS
  INTEGER,PARAMETER   :: ZARG=1024
  CHARACTER(LEN=ZARG) :: PIFN=DIFN,WFN=DWFN,OFN=DOFN
  CHARACTER(LEN=NVCH) :: VCHS=DCHS
  REAL(KIND=RKIND)    :: VMUL=DVMUL
  REAL(KIND=RKIND)    :: ACPS=DACPS
  REAL(KIND=RKIND)    :: NDBV=-1.0_RKIND
  LOGICAL             :: ABIN=.FALSE.
  LOGICAL             :: CMPR=.FALSE.
  INTEGER             :: SMPR=DSMPR

  ! DERIVED PARAMETERS
  INTEGER                      :: ZDATA=0
  REAL(KIND=RKIND),ALLOCATABLE :: DATAL(:),DATAR(:)

  ! --- EXE CODE ---
  CALL MZSYN_MAIN()
  ! --- END CODE ---

CONTAINS

  SUBROUTINE MZSYN_MAIN()
    IMPLICIT NONE
    ! --- EXE CODE ---
    CALL MZSYN_CMDLINE()
    CALL MZSYN_INITSYN()
    CALL MZSYN_GENERATE()    
    CALL MZSYN_POSTPROC()
    CALL MZSYN_SAVE()
    ! --- END CODE ---
  END SUBROUTINE MZSYN_MAIN
  
  SUBROUTINE MZSYN_CMDLINE()
    IMPLICIT NONE
    ! --- VARIABLES ---
    CHARACTER(LEN=ZARG) :: CARG='',RARG=''
    CHARACTER(LEN=10)   :: FMRD='',FMWT=''
    INTEGER             :: K,NARG=0
    LOGICAL             :: FEX
    ! --- INTERFACE ---
    INTERFACE
       SUBROUTINE TOUPPR(C)
         IMPLICIT NONE
         CHARACTER(LEN=*) :: C
         INTENT(IN)       :: C           
       END SUBROUTINE TOUPPR
    END INTERFACE
    ! --- EXE CODE  ---
    NARG=0
    DO 
       NARG=NARG+1
       CALL GET_COMMAND_ARGUMENT(NARG,CARG)
       CARG=ADJUSTL(CARG)
       IF (CARG.EQ.'') GOTO 100
       IF (CARG(1:1).EQ.'-') CALL TOUPPR(CARG)
       SELECT CASE (CARG)
       ! --- UNARY ARGUMENTS ---
       CASE('-V','-VERBOSE')
          PFL_VERB=.NOT.PFL_VERB
          RARG='VERBOSE MODE'
          IF (PFL_VERB) WRITE(*,700) TRIM(CARG),':',TRIM(RARG),'ON'
       CASE('-D','-DEBUG')
          PFL_DBUG=.NOT.PFL_DBUG
          RARG='DEBUG MODE'
          IF (PFL_DBUG) THEN
             IF (PFL_VERB) WRITE(*,700) TRIM(CARG),':',TRIM(RARG),'ON'
          ELSE
             IF (PFL_VERB) WRITE(*,700) TRIM(CARG),':',TRIM(RARG),'OFF'
          END IF
       CASE('-P','-DYNAMIC-COMPRESSION')
          CMPR=.NOT.CMPR
          RARG='DYNAMIC COMPRESSION'
          IF (CMPR) THEN
             IF (PFL_VERB) WRITE(*,700) TRIM(CARG),':',TRIM(RARG),'ON'
          ELSE
             IF (PFL_VERB) WRITE(*,700) TRIM(CARG),':',TRIM(RARG),'OFF'
          END IF          
       CASE('-W','-OVERWRITE')
          PFL_OVWT=.NOT.PFL_OVWT
          RARG='OVERWRITE MODE'
          IF (PFL_OVWT) THEN
             IF (PFL_VERB) WRITE(*,700) TRIM(CARG),':',TRIM(RARG),'ON'
          ELSE
             IF (PFL_VERB) WRITE(*,700) TRIM(CARG),':',TRIM(RARG),'OFF'
          END IF
       ! --- BINARY ARGUMENTS ---
       CASE('-A','-ADVANCE')
          IF (PFL_VERB) WRITE(*,700) TRIM(CARG),':','SET ADVANCE RATE'
          NARG=NARG+1
          IF (NARG.GT.COMMAND_ARGUMENT_COUNT()) GOTO 900
          CALL GET_COMMAND_ARGUMENT(NARG,CARG)
          READ(CARG,*,ERR=900) ACPS
          IF (ACPS.LT.1) GOTO 900
          IF (PFL_VERB) WRITE(*,710) 'ADVANCE RATE =',ACPS,'COL/S'
       CASE('-C','-CHANNEL-SELECT')
          IF (PFL_VERB) WRITE(*,700) TRIM(CARG),':','SET CHANNEL DEFINITIONS'
          NARG=NARG+1          
          IF (NARG.GT.COMMAND_ARGUMENT_COUNT()) GOTO 910
          CALL GET_COMMAND_ARGUMENT(NARG,CARG)
          CARG=TRIM(CARG)
          IF (LEN(CARG).NE.NVCH) GOTO 910          
          DO K=1,NVCH
             IF (SCAN(CARG(K:K),'RGBLM').EQ.0) GOTO 910             
          END DO
          VCHS=CARG(1:NVCH)
          IF (PFL_VERB) WRITE(*,700) 'CHANNEL SELECTOR =',VCHS
       CASE('-M','-VOLUME-MULTIPLIER')
          IF (PFL_VERB) WRITE(*,700) TRIM(CARG),':','SET VOLUME MULTIPLIER'
          NARG=NARG+1
          IF (NARG.GT.COMMAND_ARGUMENT_COUNT()) GOTO 920
          CALL GET_COMMAND_ARGUMENT(NARG,CARG)
          READ(CARG,*,ERR=920) VMUL
          IF (VMUL.LT.0) GOTO 920
          IF (PFL_VERB) WRITE(*,710) 'VOLUME MULTIPLIER =',VMUL
       CASE('-N','-NORMALIZE')
          IF (PFL_VERB) WRITE(*,700) TRIM(CARG),':','SET CLIP FRACTION'
          NARG=NARG+1
          IF (NARG.GT.COMMAND_ARGUMENT_COUNT()) GOTO 930
          CALL GET_COMMAND_ARGUMENT(NARG,CARG)
          READ(CARG,*,ERR=930) NDBV
          IF (PFL_VERB) WRITE(*,710) 'NORMALIZATION VALUE IN DB =',NDBV
       CASE('-O','-OUTPUT-FILE')
          IF (PFL_VERB) WRITE(*,700) TRIM(CARG),':','SET OUTPUT FILE'
          NARG=NARG+1
          IF (NARG.GT.COMMAND_ARGUMENT_COUNT()) GOTO 940
          CALL GET_COMMAND_ARGUMENT(NARG,CARG)
          OFN=CARG
          IF (PFL_VERB) WRITE(*,700) 'OUTPUT FILE IS',TRIM(OFN)
          INQUIRE(FILE=OFN,EXIST=FEX,WRITE=FMWT)
          IF (FEX.AND..NOT.PFL_OVWT) GOTO 945
          IF (FEX.AND.PFL_OVWT.AND.FMWT.EQ.'NO') GOTO 947
       CASE('-S','-SAMPLING-RATE')
          IF (PFL_VERB) WRITE(*,700) TRIM(CARG),':','SET SAMPLING RATE'
          NARG=NARG+1
          IF (NARG.GT.COMMAND_ARGUMENT_COUNT()) GOTO 950
          CALL GET_COMMAND_ARGUMENT(NARG,CARG)
          READ(CARG,*,ERR=948) SMPR
          IF (SMPR.LT.DSMPR) GOTO 948
       CASE('-T','-WAVE-TABLE')
          IF (PFL_VERB) WRITE(*,700) TRIM(CARG),':','SET WAVE TABLE'
          NARG=NARG+1
          IF (NARG.GT.COMMAND_ARGUMENT_COUNT()) GOTO 950
          CALL GET_COMMAND_ARGUMENT(NARG,CARG)
          WFN=CARG
          INQUIRE(FILE=WFN,EXIST=FEX)
          ABIN=.NOT.FEX ! REVERSE SENSE OF LOGICAL VARIABLE
          IF (PFL_VERB) WRITE(*,700) 'WAVE TABLE IS ',TRIM(WFN)
          IF (ABIN) THEN
             IF (PFL_VERB) WRITE(*,700) 'WAVE TABLE TO BE GENERATED AB INITIO'
          ELSE
             IF (PFL_VERB) WRITE(*,700) 'WAVE TABLE TO BE READ FROM FILE'
          END IF          
       CASE DEFAULT
          IF (CARG(1:1).EQ.'-') GOTO 990
          PIFN=CARG
          IF (PFL_VERB) WRITE (*,700) 'INPUT FILE IS',TRIM(PIFN)
          INQUIRE(FILE=PIFN,EXIST=FEX,READ=FMRD)
          IF (.NOT.FEX)      GOTO 960
          IF (TRIM(FMRD).EQ.'NO') GOTO 960
       END SELECT
    END DO
100 CONTINUE
    ! --- END CODE  ---
    RETURN
700 FORMAT('MZSYNTH:',999(:,1X,A))
710 FORMAT('MZSYNTH:',999(:,1X,A,:,1X,G13.6))
800 FORMAT('!ERROR:',999(:,1X,A))
900 WRITE(*,800) 'ADVANCE RATE MUST BE PRESENT AND >= 1'         ; STOP
910 WRITE(*,800) 'CHANNEL MULTIPLIER MUST BE FOUR OF [RGBLM]'    ; STOP
920 WRITE(*,800) 'VOLUME MULTIPLIER MUST BE PRESENT AND >= 0'    ; STOP
930 WRITE(*,800) 'NORM DBV MUST BE PRESENT AND 0 < F < 0.5'      ; STOP
940 WRITE(*,800) 'EXPECTING OUTPUT FILE NAME'                    ; STOP
945 WRITE(*,800) 'OUTPUT FILE EXISTS AND OVERWRITE MODE IS OFF.' ; STOP
947 WRITE(*,800) 'OUTPUT FILE CANNOT BE OPENED IN WRITE MODE.'   ; STOP
948 WRITE(*,800) 'SAMPLING RATE MUST BE INT >= 44100'            ; STOP
950 WRITE(*,800) 'EXPECTING WAVEFORM FILE NAME'                  ; STOP
960 WRITE(*,800) 'CANNOT READ INPUT FILE',TRIM(PIFN)             ; STOP
990 WRITE(*,800) 'INVALID COMMAND LINE OPTION',TRIM(CARG)        ; STOP
  END SUBROUTINE MZSYN_CMDLINE

  SUBROUTINE MZSYN_INITSYN()
    IMPLICIT NONE
    ! --- VARIABLES ---
    INTEGER :: MS
    ! --- EXE CODE ---
    CALL MZOSC_INIT(ABIN,WFN,SMPR)
    CALL MZPNL_LOAD(PIFN,VCHS,ANCLPS=ACPS)
    
    ZDATA=(NC-1)*N_SMP_PER_COL
    ALLOCATE(DATAL(1:ZDATA),DATAR(1:ZDATA),STAT=MS) ; IF (MS.NE.0) GOTO 900
    DATAL=0
    DATAR=0
    ! --- END CODE ---
    RETURN
800 FORMAT('!ERROR:',999(:,1X,A))
900 WRITE(*,800) 'MEMORY ALLOCATION ERROR' ; STOP
  END SUBROUTINE MZSYN_INITSYN

  SUBROUTINE MZSYN_GENERATE()
    IMPLICIT NONE
    ! --- VARIABLES ---
    INTEGER :: J,K
    REAL(KIND=RKIND) :: TDATA
    ! --- EXE CODE  ---
    DO J=1,ZDATA
       IF (PFL_VERB) THEN
          IF (MOD(J,SMPR).EQ.0) WRITE(*,700) 'SMPL=',J, &
               '; %COMPLETE=',100.0*REAL(J)/REAL(ZDATA),  &
               '; TIME/S=',REAL(J) / N_SMP_PER_SEC
       END IF
       CALL MZOSC_TICK()
       CALL MZPNL_TICK()
       TDATA=0
       !$OMP PARALLEL DO REDUCTION(+:TDATA)
       DO K=1,N_OSC
          TDATA=TDATA+LKT_SINE(OSC_ACCM(K),K)*WSINE(K)+ &
                      LKT_SQWV(OSC_ACCM(K),K)*WSQWV(K)+ &
                      LKT_SWTH(OSC_ACCM(K),K)*WSWTH(K)+ &
                      LKT_TRNG(OSC_ACCM(K),K)*WTRNG(K)
       END DO
       !$OMP END PARALLEL DO
       DATAL(J)=TDATA
       DATAR(J)=TDATA
    END DO    
    ! --- END CODE  ---
    RETURN
700 FORMAT('MZSYN_GENERATE:',1X,999(:,A,G12.5))    
  END SUBROUTINE MZSYN_GENERATE

  SUBROUTINE MZSYN_POSTPROC()
    IMPLICIT NONE
    ! --- EXE CODE ---
    CALL MZN_NORM(DATAL,NDB=NDBV,CMP=CMPR)
    CALL MZN_NORM(DATAR,NDB=NDBV,CMP=CMPR)
    ! --- END CODE ---
  END SUBROUTINE MZSYN_POSTPROC

  SUBROUTINE MZSYN_SAVE()
    IMPLICIT NONE
    ! --- VARIABLES ---
    INTEGER     :: J
    TYPE (AU_T) :: AU
    ! --- EXE CODE ---
    CALL AU_CREATE(AU,'',SMPR,2, &
                   RDATA=REAL((/(DATAL(J),DATAR(J),J=1,ZDATA)/),4))
    CALL AU_WRITE(AU,OFN,OFU,PFL_OVWT)
    ! --- END CODE ---
  END SUBROUTINE MZSYN_SAVE
  
END PROGRAM
